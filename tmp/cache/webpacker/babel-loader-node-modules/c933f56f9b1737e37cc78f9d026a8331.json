{"ast":null,"code":"// // This fake server uses http://alasql.org/ to mimic how a real server\n// // might generate sql queries from the Server-Side Row Model request.\n// // To keep things simple it does the bare minimum to support the example.\n// function FakeServer(allData) {\n//   alasql.options.cache = false;\n//   return {\n//     getData: function (request) {\n//       var results = executeQuery(request);\n//       return {\n//         success: true,\n//         rows: results,\n//         lastRow: getLastRowIndex(request, results),\n//       };\n//     },\n//     getCountries: function () {\n//       var SQL = 'SELECT DISTINCT country FROM ? ORDER BY country ASC';\n//       return alasql(SQL, [allData]).map(function (x) {\n//         return x.country;\n//       });\n//     },\n//   };\n//   function executeQuery(request) {\n//     var sql = buildSql(request);\n//     console.log('[FakeServer] - about to execute query:', sql);\n//     return alasql(sql, [allData]);\n//   }\n//   function buildSql(request) {\n//     return (\n//       'SELECT * FROM ?' +\n//       whereSql(request) +\n//       orderBySql(request) +\n//       limitSql(request)\n//     );\n//   }\n//   function whereSql(request) {\n//     var whereParts = [];\n//     var filterModel = request.filterModel;\n//     if (filterModel) {\n//       Object.keys(filterModel).forEach(function (columnKey) {\n//         var filter = filterModel[columnKey];\n//         if (filter.filterType === 'set') {\n//           whereParts.push(\n//             columnKey + \" IN ('\" + filter.values.join(\"', '\") + \"')\"\n//           );\n//           return;\n//         }\n//         console.log('unsupported filter type: ' + filter.filterType);\n//       });\n//     }\n//     if (whereParts.length > 0) {\n//       return ' WHERE ' + whereParts.join(' AND ');\n//     }\n//     return '';\n//   }\n//   function orderBySql(request) {\n//     var sortModel = request.sortModel;\n//     if (sortModel.length === 0) return '';\n//     var sorts = sortModel.map(function (s) {\n//       return s.colId + ' ' + s.sort.toUpperCase();\n//     });\n//     return ' ORDER BY ' + sorts.join(', ');\n//   }\n//   function limitSql(request) {\n//     var blockSize = request.endRow - request.startRow;\n//     return ' LIMIT ' + (blockSize + 1) + ' OFFSET ' + request.startRow;\n//   }\n//   function getLastRowIndex(request, results) {\n//     if (!results || results.length === 0) {\n//       return request.startRow;\n//     }\n//     var currentLastRow = request.startRow + results.length;\n//     return currentLastRow <= request.endRow ? currentLastRow : -1;\n//   }\n// }\nalert(\"fake server\");","map":{"version":3,"sources":["/home/zwenex/code/web_refreshment/rails/student_record/app/javascript/packs/fakeServer.js"],"names":["alert"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEAA,KAAK,CAAC,aAAD,CAAL","sourcesContent":["// // This fake server uses http://alasql.org/ to mimic how a real server\n// // might generate sql queries from the Server-Side Row Model request.\n// // To keep things simple it does the bare minimum to support the example.\n// function FakeServer(allData) {\n//   alasql.options.cache = false;\n\n//   return {\n//     getData: function (request) {\n//       var results = executeQuery(request);\n\n//       return {\n//         success: true,\n//         rows: results,\n//         lastRow: getLastRowIndex(request, results),\n//       };\n//     },\n//     getCountries: function () {\n//       var SQL = 'SELECT DISTINCT country FROM ? ORDER BY country ASC';\n\n//       return alasql(SQL, [allData]).map(function (x) {\n//         return x.country;\n//       });\n//     },\n//   };\n\n//   function executeQuery(request) {\n//     var sql = buildSql(request);\n\n//     console.log('[FakeServer] - about to execute query:', sql);\n\n//     return alasql(sql, [allData]);\n//   }\n\n//   function buildSql(request) {\n//     return (\n//       'SELECT * FROM ?' +\n//       whereSql(request) +\n//       orderBySql(request) +\n//       limitSql(request)\n//     );\n//   }\n\n//   function whereSql(request) {\n//     var whereParts = [];\n//     var filterModel = request.filterModel;\n\n//     if (filterModel) {\n//       Object.keys(filterModel).forEach(function (columnKey) {\n//         var filter = filterModel[columnKey];\n\n//         if (filter.filterType === 'set') {\n//           whereParts.push(\n//             columnKey + \" IN ('\" + filter.values.join(\"', '\") + \"')\"\n//           );\n//           return;\n//         }\n\n//         console.log('unsupported filter type: ' + filter.filterType);\n//       });\n//     }\n\n//     if (whereParts.length > 0) {\n//       return ' WHERE ' + whereParts.join(' AND ');\n//     }\n\n//     return '';\n//   }\n\n//   function orderBySql(request) {\n//     var sortModel = request.sortModel;\n\n//     if (sortModel.length === 0) return '';\n\n//     var sorts = sortModel.map(function (s) {\n//       return s.colId + ' ' + s.sort.toUpperCase();\n//     });\n\n//     return ' ORDER BY ' + sorts.join(', ');\n//   }\n\n//   function limitSql(request) {\n//     var blockSize = request.endRow - request.startRow;\n\n//     return ' LIMIT ' + (blockSize + 1) + ' OFFSET ' + request.startRow;\n//   }\n\n//   function getLastRowIndex(request, results) {\n//     if (!results || results.length === 0) {\n//       return request.startRow;\n//     }\n\n//     var currentLastRow = request.startRow + results.length;\n\n//     return currentLastRow <= request.endRow ? currentLastRow : -1;\n//   }\n// }\n\nalert(\"fake server\");"]},"metadata":{},"sourceType":"module"}