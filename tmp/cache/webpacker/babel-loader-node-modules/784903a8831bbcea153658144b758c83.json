{"ast":null,"code":"// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nalert(\"connect fake server\");\n\nfunction FakeServer(allData) {\n  alasql.options.cache = false;\n  return {\n    getData: function getData(request) {\n      var results = executeQuery(request);\n      return {\n        success: true,\n        rows: results,\n        lastRow: getLastRowIndex(request, results)\n      };\n    },\n    getCountries: function getCountries() {\n      var SQL = 'SELECT DISTINCT country FROM ? ORDER BY country ASC';\n      return alasql(SQL, [allData]).map(function (x) {\n        return x.country;\n      });\n    }\n  };\n\n  function executeQuery(request) {\n    var sql = buildSql(request);\n    console.log('[FakeServer] - about to execute query:', sql);\n    return alasql(sql, [allData]);\n  }\n\n  function buildSql(request) {\n    return 'SELECT * FROM ?' + whereSql(request) + orderBySql(request) + limitSql(request);\n  }\n\n  function whereSql(request) {\n    var whereParts = [];\n    var filterModel = request.filterModel;\n\n    if (filterModel) {\n      Object.keys(filterModel).forEach(function (columnKey) {\n        var filter = filterModel[columnKey];\n\n        if (filter.filterType === 'set') {\n          whereParts.push(columnKey + \" IN ('\" + filter.values.join(\"', '\") + \"')\");\n          return;\n        }\n\n        console.log('unsupported filter type: ' + filter.filterType);\n      });\n    }\n\n    if (whereParts.length > 0) {\n      return ' WHERE ' + whereParts.join(' AND ');\n    }\n\n    return '';\n  }\n\n  function orderBySql(request) {\n    var sortModel = request.sortModel;\n    if (sortModel.length === 0) return '';\n    var sorts = sortModel.map(function (s) {\n      return s.colId + ' ' + s.sort.toUpperCase();\n    });\n    return ' ORDER BY ' + sorts.join(', ');\n  }\n\n  function limitSql(request) {\n    var blockSize = request.endRow - request.startRow;\n    return ' LIMIT ' + (blockSize + 1) + ' OFFSET ' + request.startRow;\n  }\n\n  function getLastRowIndex(request, results) {\n    if (!results || results.length === 0) {\n      return request.startRow;\n    }\n\n    var currentLastRow = request.startRow + results.length;\n    return currentLastRow <= request.endRow ? currentLastRow : -1;\n  }\n}","map":{"version":3,"sources":["/home/zwenex/code/web_refreshment/rails/student_record/app/javascript/packs/fakeServer.js"],"names":["alert","FakeServer","allData","alasql","options","cache","getData","request","results","executeQuery","success","rows","lastRow","getLastRowIndex","getCountries","SQL","map","x","country","sql","buildSql","console","log","whereSql","orderBySql","limitSql","whereParts","filterModel","Object","keys","forEach","columnKey","filter","filterType","push","values","join","length","sortModel","sorts","s","colId","sort","toUpperCase","blockSize","endRow","startRow","currentLastRow"],"mappings":"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","sourcesContent":["// This fake server uses http://alasql.org/ to mimic how a real server\n// might generate sql queries from the Server-Side Row Model request.\n// To keep things simple it does the bare minimum to support the example.\nalert(\"connect fake server\");\n\nfunction FakeServer(allData) {\n  alasql.options.cache = false;\n\n  return {\n    getData: function (request) {\n      var results = executeQuery(request);\n\n      return {\n        success: true,\n        rows: results,\n        lastRow: getLastRowIndex(request, results),\n      };\n    },\n    getCountries: function () {\n      var SQL = 'SELECT DISTINCT country FROM ? ORDER BY country ASC';\n\n      return alasql(SQL, [allData]).map(function (x) {\n        return x.country;\n      });\n    },\n  };\n\n  function executeQuery(request) {\n    var sql = buildSql(request);\n\n    console.log('[FakeServer] - about to execute query:', sql);\n\n    return alasql(sql, [allData]);\n  }\n\n  function buildSql(request) {\n    return (\n      'SELECT * FROM ?' +\n      whereSql(request) +\n      orderBySql(request) +\n      limitSql(request)\n    );\n  }\n\n  function whereSql(request) {\n    var whereParts = [];\n    var filterModel = request.filterModel;\n\n    if (filterModel) {\n      Object.keys(filterModel).forEach(function (columnKey) {\n        var filter = filterModel[columnKey];\n\n        if (filter.filterType === 'set') {\n          whereParts.push(\n            columnKey + \" IN ('\" + filter.values.join(\"', '\") + \"')\"\n          );\n          return;\n        }\n\n        console.log('unsupported filter type: ' + filter.filterType);\n      });\n    }\n\n    if (whereParts.length > 0) {\n      return ' WHERE ' + whereParts.join(' AND ');\n    }\n\n    return '';\n  }\n\n  function orderBySql(request) {\n    var sortModel = request.sortModel;\n\n    if (sortModel.length === 0) return '';\n\n    var sorts = sortModel.map(function (s) {\n      return s.colId + ' ' + s.sort.toUpperCase();\n    });\n\n    return ' ORDER BY ' + sorts.join(', ');\n  }\n\n  function limitSql(request) {\n    var blockSize = request.endRow - request.startRow;\n\n    return ' LIMIT ' + (blockSize + 1) + ' OFFSET ' + request.startRow;\n  }\n\n  function getLastRowIndex(request, results) {\n    if (!results || results.length === 0) {\n      return request.startRow;\n    }\n\n    var currentLastRow = request.startRow + results.length;\n\n    return currentLastRow <= request.endRow ? currentLastRow : -1;\n  }\n}"]},"metadata":{},"sourceType":"module"}