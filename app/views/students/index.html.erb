<!DOCTYPE html>
<html lang="en">
<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/alasql/0.5.5/alasql.min.js"></script>
</head>
<body>
     <p id="notice"><%= notice %></p>
     <%= link_to 'New Student', new_student_path, class: "btn btn-primary" %>

     <h1>Students</h1>

     <div id="myGrid" style="height: 600px;width:100%;" class="ag-theme-alpine-dark mt-3"></div>

     <br>
</body>
     <script type="text/javascript" charset="utf-8">
          var gridOptions = {
          columnDefs: [
          { field: 'roll_no' },
          { field: 'name' },
          { field: 'gender' },
          { field: 'year' },
          { field: 'dob' },
          { field: 'father_name' },
          { field: 'mother_name' },
          ],

          rowModelType: 'serverSide',

          defaultColDef: {
          flex: 1,
          minWidth: 90,
          resizable: true,
          },

          // use the server-side row model
          rowModelType: 'serverSide',
          serverSideStoreType: 'partial',

          // enable pagination
          pagination: true,

          // 10 rows per page (default is 100)
          paginationPageSize: 10,

          // fetch 10 rows per block as page size is 10 (default is 100)
          cacheBlockSize: 10,

          animateRows: true,
          };

          // setup the grid after the page has finished loading
          document.addEventListener('DOMContentLoaded', function () {
          var gridDiv = document.querySelector('#myGrid');
          new agGrid.Grid(gridDiv, gridOptions);

          agGrid
          .simpleHttpRequest({
               // url: 'https://www.ag-grid.com/example-assets/olympic-winners.json',
               url: "http://localhost:3000/students.json"
          })
          .then(function (data) {
               // add id to data
               var idSequence = 1;
               data.forEach(function (item) {
               item.id = idSequence++;
               console.log(item);
               });

               // setup the fake server with entire dataset
               var fakeServer = new FakeServer(data);

               // create datasource with a reference to the fake server
               var datasource = new ServerSideDatasource(fakeServer);

               // register the datasource with the grid
               gridOptions.api.setServerSideDatasource(datasource);
          });
          });

          function ServerSideDatasource(server) {
          return {
          getRows: function (params) {
               console.log('[Datasource] - rows requested by grid: ', params.request);

               var response = server.getData(params.request);
               // adding delay to simulate real server call
               setTimeout(function () {
               if (response.success) {
                    // call the success callback
                    params.success({
                    rowData: response.rows,
                    rowCount: response.lastRow,
                    });
               } else {
                    // inform the grid request failed
                    params.fail();
               }
               }, 200);
          },
          };
          }

          agGrid.LicenseManager.setLicenseKey("CompanyName=Zwenexsys,LicensedGroup=C4M,LicenseType=MultipleApplications,LicensedConcurrentDeveloperCount=1,LicensedProductionInstancesCount=0,AssetReference=AG-010270,ExpiryDate=16_October_2021_[v2]_MTYzNDMzODgwMDAwMA==4bbfea46001dcd4e2023e71d63d7afc7")

          function FakeServer(allData) {
               alasql.options.cache = false;
               console.log("fake server=================");
               return {
               getData: function (request) {
                    var results = executeQuery(request);
                    console.log(results + "result-----------");
                    return {
                         success: true,
                         rows: results,
                         lastRow: getLastRowIndex(request, results),
                    };
               },
               getCountries: function () {
                    var SQL = 'SELECT DISTINCT student FROM ? ORDER BY student ASC';

                    return alasql(SQL, [allData]).map(function (x) {
                    return x.student;
                    });
               },
               };

               function executeQuery(request) {
               var sql = buildSql(request);

               console.log('[FakeServer] - about to execute query:', sql);

               return alasql(sql, [allData]);
               }

               function buildSql(request) {
               return (
                    'SELECT * FROM ?' +
                    whereSql(request) +
                    orderBySql(request) +
                    limitSql(request)
               );
               }

               function whereSql(request) {
               var whereParts = [];
               var filterModel = request.filterModel;

               if (filterModel) {
                    Object.keys(filterModel).forEach(function (columnKey) {
                    var filter = filterModel[columnKey];

                    if (filter.filterType === 'set') {
                         whereParts.push(
                         columnKey + " IN ('" + filter.values.join("', '") + "')"
                         );
                         return;
                    }

                    console.log('unsupported filter type: ' + filter.filterType);
                    });
               }

               if (whereParts.length > 0) {
                    return ' WHERE ' + whereParts.join(' AND ');
               }

               return '';
               }

               function orderBySql(request) {
               var sortModel = request.sortModel;

               if (sortModel.length === 0) return '';

               var sorts = sortModel.map(function (s) {
                    return s.colId + ' ' + s.sort.toUpperCase();
               });

               return ' ORDER BY ' + sorts.join(', ');
               }

               function limitSql(request) {
               var blockSize = request.endRow - request.startRow;

               return ' LIMIT ' + (blockSize + 1) + ' OFFSET ' + request.startRow;
               }

               function getLastRowIndex(request, results) {
               if (!results || results.length === 0) {
                    return request.startRow;
               }

               var currentLastRow = request.startRow + results.length;

               return currentLastRow <= request.endRow ? currentLastRow : -1;
               }
               }
     </script>
</html>